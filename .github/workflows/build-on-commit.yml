name: Release build

on:
  push:
    branches:
      - twrp  # Change to your branch name

env:
  CROSS_COMPILE_PREFIX: /aarch64-linux-android-4.9/bin/aarch64-linux-android-
  IMAGE: /arch/arm64/boot/Image.gz-dtb
  ANYKERNEL3_DIR: /anykernel

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.sha }}  # Use commit SHA as the version
      RELEASE_VERSION: ${{ github.sha }}  # Same for release version
    steps:
      - name: Checkout kernel repo
        uses: actions/checkout@v4
        with:
          ref: twrp
          fetch-depth: 0

      - name: Cache toolchain
        id: toolchain-cache
        uses: actions/cache@v3
        with:
          path: ./aarch64-linux-android-4.9
          key: ${{ runner.os }}-gcc4.9
          restore-keys: |
            ${{ runner.os }}-gcc4.9-

      - name: Checkout toolchain repo
        if: ${{ steps.toolchain-cache.outputs.cache-hit != 'true' }}
        uses: actions/checkout@v4
        with:
          repository: kindle4jerry/aarch64-linux-android-4.9-bakup
          path: aarch64-linux-android-4.9

      - name: Install and configure ccache
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache
          export CCACHE_DIR=$HOME/.ccache
          export PATH="/usr/lib/ccache:$PATH"
          ccache --max-size=10G
          echo "Initial ccache stats:"
          ccache -s

      - name: Pre-fill ccache
        run: |
          echo "Generating initial ccache files..."
          gcc --version > /dev/null 2>&1
          ccache -s

      - name: Cache ccache
        id: ccache-cache
        uses: actions/cache@v3
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ github.event.ref_name }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Get current path
        run: echo "DIR=$(pwd)" >> $GITHUB_ENV

      - name: Build defconfig
        run: make ARCH=arm64 lineageos_bullhead_defconfig

      - name: Build kernel
        run: make ARCH=arm64 CROSS_COMPILE=$DIR${CROSS_COMPILE_PREFIX} -j$(nproc)

      - name: Copy kernel to release dir
        run: cp $DIR${IMAGE} $DIR${ANYKERNEL3_DIR}

      - name: Make name for zip
        run: echo "FINAL_ZIP=Perf-kernel-$(date -u +"%Y%m%d-%H%M").zip" >> $GITHUB_ENV

      - name: Zip release
        run: |
          cd ./${ANYKERNEL3_DIR}
          zip -r9 $FINAL_ZIP ./*

      - name: Set Git config
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Create tag for release
        run: |
          git tag -a "Perf-kernel-$(date -u +"%Y%m%d-%H%M")" -m "Release for kernel build"
          git push origin "Perf-kernel-$(date -u +"%Y%m%d-%H%M")"

      - name: Release under current commit
        run: |
          export "CHANGELOG_FILE=$(mktemp --suffix=.md)"
          echo "CHANGELOG_FILE=${CHANGELOG_FILE}" >> $GITHUB_ENV
          echo "Release for commit ${RELEASE_VERSION}" > "${CHANGELOG_FILE}"
          echo "### Changes" >> "${CHANGELOG_FILE}"
          git log --oneline --abbrev-commit ${{ github.event.before }}..${{ github.sha }} >> "${CHANGELOG_FILE}"
          echo "### Branch" >> "${CHANGELOG_FILE}"
          echo "${{ github.ref }}" >> "${CHANGELOG_FILE}"
          gh release create "Perf-kernel-$(date -u +"%Y%m%d-%H%M")" -F "${CHANGELOG_FILE}" ./${ANYKERNEL3_DIR}/$FINAL_ZIP
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }
